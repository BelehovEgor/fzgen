// Code generated by mockery v2.51.1. DO NOT EDIT.

package supportedinterface

import (
	supportedinterface "github.com/BelehovEgor/fzgen/examples/inputs/1-supported-interface"
	mock "github.com/stretchr/testify/mock"
)

// MockPrinter is an autogenerated mock type for the Printer type
type MockPrinter struct {
	mock.Mock
}

type MockPrinter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrinter) EXPECT() *MockPrinter_Expecter {
	return &MockPrinter_Expecter{mock: &_m.Mock}
}

// Print provides a mock function with given fields: s
func (_m *MockPrinter) Print(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Print")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrinter_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockPrinter_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - s string
func (_e *MockPrinter_Expecter) Print(s interface{}) *MockPrinter_Print_Call {
	return &MockPrinter_Print_Call{Call: _e.mock.On("Print", s)}
}

func (_c *MockPrinter_Print_Call) Run(run func(s string)) *MockPrinter_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPrinter_Print_Call) Return(_a0 int, _a1 error) *MockPrinter_Print_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrinter_Print_Call) RunAndReturn(run func(string) (int, error)) *MockPrinter_Print_Call {
	_c.Call.Return(run)
	return _c
}

// PrintPrinter provides a mock function with no fields
func (_m *MockPrinter) PrintPrinter() supportedinterface.Printer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrintPrinter")
	}

	var r0 supportedinterface.Printer
	if rf, ok := ret.Get(0).(func() supportedinterface.Printer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(supportedinterface.Printer)
		}
	}

	return r0
}

// MockPrinter_PrintPrinter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintPrinter'
type MockPrinter_PrintPrinter_Call struct {
	*mock.Call
}

// PrintPrinter is a helper method to define mock.On call
func (_e *MockPrinter_Expecter) PrintPrinter() *MockPrinter_PrintPrinter_Call {
	return &MockPrinter_PrintPrinter_Call{Call: _e.mock.On("PrintPrinter")}
}

func (_c *MockPrinter_PrintPrinter_Call) Run(run func()) *MockPrinter_PrintPrinter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrinter_PrintPrinter_Call) Return(_a0 supportedinterface.Printer) *MockPrinter_PrintPrinter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrinter_PrintPrinter_Call) RunAndReturn(run func() supportedinterface.Printer) *MockPrinter_PrintPrinter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrinter creates a new instance of MockPrinter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrinter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrinter {
	mock := &MockPrinter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
