package main

// Edit if desired. Code generated by "fzgen io".

import (
	io "io"
	"reflect"
	"testing"

	"github.com/BelehovEgor/fzgen/fuzzer"
)

func Fuzz_LimitedReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var l *io.LimitedReader
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&l, &p)
		if err != nil || l == nil {
			return
		}

		l.Read(p)
	})
}

func Fuzz_OffsetWriter_Seek(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var offset int64
		var whence int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&o, &offset, &whence)
		if err != nil || o == nil {
			return
		}

		o.Seek(offset, whence)
	})
}

func Fuzz_OffsetWriter_Write(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&o, &p)
		if err != nil || o == nil {
			return
		}

		o.Write(p)
	})
}

func Fuzz_OffsetWriter_WriteAt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var p []byte
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&o, &p, &off)
		if err != nil || o == nil {
			return
		}

		o.WriteAt(p, off)
	})
}

func Fuzz_PipeReader_CloseWithError(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r *io.PipeReader
		var err error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err_1 := fz.Fill2(&r, &err)
		if err_1 != nil || r == nil {
			return
		}

		r.CloseWithError(err)
	})
}

func Fuzz_PipeReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r *io.PipeReader
		var data_0 []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &data_0)
		if err != nil || r == nil {
			return
		}

		r.Read(data_0)
	})
}

func Fuzz_PipeWriter_CloseWithError(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *io.PipeWriter
		var err error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err_1 := fz.Fill2(&w, &err)
		if err_1 != nil || w == nil {
			return
		}

		w.CloseWithError(err)
	})
}

func Fuzz_PipeWriter_Write(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *io.PipeWriter
		var data_0 []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&w, &data_0)
		if err != nil || w == nil {
			return
		}

		w.Write(data_0)
	})
}

func Fuzz_SectionReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&s, &p)
		if err != nil || s == nil {
			return
		}

		s.Read(p)
	})
}

func Fuzz_SectionReader_ReadAt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var p []byte
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&s, &p, &off)
		if err != nil || s == nil {
			return
		}

		s.ReadAt(p, off)
	})
}

func Fuzz_SectionReader_Seek(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var offset int64
		var whence int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&s, &offset, &whence)
		if err != nil || s == nil {
			return
		}

		s.Seek(offset, whence)
	})
}

func Fuzz_Copy(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&dst, &src)
		if err != nil {
			return
		}

		io.Copy(dst, src)
	})
}

func Fuzz_CopyBuffer(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		var buf []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&dst, &src, &buf)
		if err != nil {
			return
		}

		io.CopyBuffer(dst, src, buf)
	})
}

func Fuzz_CopyN(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&dst, &src, &n)
		if err != nil {
			return
		}

		io.CopyN(dst, src, n)
	})
}

func Fuzz_LimitReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &n)
		if err != nil {
			return
		}

		io.LimitReader(r, n)
	})
}

func Fuzz_MultiReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var readers []io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&readers)
		if err != nil {
			return
		}

		io.MultiReader(readers...)
	})
}

func Fuzz_MultiWriter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var writers []io.Writer
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&writers)
		if err != nil {
			return
		}

		io.MultiWriter(writers...)
	})
}

func Fuzz_NewOffsetWriter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w io.WriterAt
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&w, &off)
		if err != nil {
			return
		}

		io.NewOffsetWriter(w, off)
	})
}

func Fuzz_NewSectionReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.ReaderAt
		var off int64
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &off, &n)
		if err != nil {
			return
		}

		io.NewSectionReader(r, off, n)
	})
}

func Fuzz_NopCloser(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r)
		if err != nil {
			return
		}

		io.NopCloser(r)
	})
}

func Fuzz_ReadAll(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r)
		if err != nil {
			return
		}

		io.ReadAll(r)
	})
}

func Fuzz_ReadAtLeast(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var buf []byte
		var min int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &buf, &min)
		if err != nil {
			return
		}

		io.ReadAtLeast(r, buf, min)
	})
}

func Fuzz_ReadFull(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var buf []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &buf)
		if err != nil {
			return
		}

		io.ReadFull(r, buf)
	})
}

func Fuzz_TeeReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var w io.Writer
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&r, &w)
		if err != nil {
			return
		}

		io.TeeReader(r, w)
	})
}

func Fuzz_WriteString(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w io.Writer
		var s string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes)
		err := fz.Fill2(&w, &s)
		if err != nil {
			return
		}

		io.WriteString(w, s)
	})
}

func fabric_interface_io_Writer_PipeWriter(impl *io.PipeWriter) io.Writer {
	return impl
}

func fabric_interface_io_Writer_OffsetWriter(impl *io.OffsetWriter) io.Writer {
	return impl
}

func fabric_interface_io_WriterAt_OffsetWriter(impl *io.OffsetWriter) io.WriterAt {
	return impl
}

func fabric_interface_io_Reader_SectionReader(impl *io.SectionReader) io.Reader {
	return impl
}

func fabric_interface_io_Reader_PipeReader(impl *io.PipeReader) io.Reader {
	return impl
}

func fabric_interface_io_Reader_LimitedReader(impl *io.LimitedReader) io.Reader {
	return impl
}

func fabric_interface_io_ReaderAt_SectionReader(impl *io.SectionReader) io.ReaderAt {
	return impl
}

func fabric_interface_empty_SectionReader(impl io.SectionReader) interface{} {
	return impl
}

func fabric_interface_empty_PipeWriter(impl io.PipeWriter) interface{} {
	return impl
}

func fabric_interface_empty_PipeReader(impl io.PipeReader) interface{} {
	return impl
}

func fabric_interface_empty_OffsetWriter(impl io.OffsetWriter) interface{} {
	return impl
}

func fabric_interface_empty_LimitedReader(impl io.LimitedReader) interface{} {
	return impl
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["io.WriterAt"] = append(FabricFuncsForCustomTypes["io.WriterAt"], reflect.ValueOf(fabric_interface_io_WriterAt_OffsetWriter))
	FabricFuncsForCustomTypes["io.ReaderAt"] = append(FabricFuncsForCustomTypes["io.ReaderAt"], reflect.ValueOf(fabric_interface_io_ReaderAt_SectionReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_SectionReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_PipeWriter))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_PipeReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_OffsetWriter))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_LimitedReader))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(fabric_interface_io_Writer_PipeWriter))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(fabric_interface_io_Writer_OffsetWriter))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_SectionReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_PipeReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_LimitedReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.TeeReader))
	FabricFuncsForCustomTypes["io.ReadCloser"] = append(FabricFuncsForCustomTypes["io.ReadCloser"], reflect.ValueOf(io.NopCloser))
	FabricFuncsForCustomTypes["io.SectionReader"] = append(FabricFuncsForCustomTypes["io.SectionReader"], reflect.ValueOf(io.NewSectionReader))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(io.MultiWriter))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.MultiReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.LimitReader))
	m.Run()
}
