package main

// Edit if desired. Code generated by "fzgen github.com/BelehovEgor/fzgen/examples/inputs/1-supported-interface".

import (
	"reflect"
	"testing"

	supportedinterface "github.com/BelehovEgor/fzgen/examples/inputs/1-supported-interface"
	"github.com/BelehovEgor/fzgen/fuzzer"
)

func Fuzz_N1_MyPrinter_Print(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var printer supportedinterface.MyPrinter
		var s string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, true)
		err := fz.Fill2(&printer, &s)
		if err != nil {
			return
		}

		printer.Print(s)
	})
}

func Fuzz_N2_MyPrinter_PrintPrinter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var printer supportedinterface.MyPrinter
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, true)
		err := fz.Fill2(&printer)
		if err != nil {
			return
		}

		printer.PrintPrinter()
	})
}

func Fuzz_N3_Do(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var printer supportedinterface.Printer
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, true)
		err := fz.Fill2(&printer)
		if err != nil {
			return
		}

		supportedinterface.Do(printer)
	})
}

func Fuzz_N5_MyEmiter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, true)
		err := fz.Fill2(&s)
		if err != nil {
			return
		}

		supportedinterface.MyEmiter(s)
	})
}

func Fuzz_N7_Target(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s supportedinterface.StructWithComplexField
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, true)
		err := fz.Fill2(&s)
		if err != nil {
			return
		}

		supportedinterface.Target(s)
	})
}

func fabric_interface_supportedinterface_Printer_MyPrinter(impl supportedinterface.MyPrinter) supportedinterface.Printer {
	return impl
}

func fabric_interface_empty_string(impl string) interface{} {
	return impl
}

func fabric_interface_empty_StructWithComplexField(impl supportedinterface.StructWithComplexField) interface{} {
	return impl
}

func fabric_interface_empty_MyPrinter(impl supportedinterface.MyPrinter) interface{} {
	return impl
}

func fabric_func_1() supportedinterface.Emiter {
	return supportedinterface.MyEmiter
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["supportedinterface.Printer"] = append(FabricFuncsForCustomTypes["supportedinterface.Printer"], reflect.ValueOf(fabric_interface_supportedinterface_Printer_MyPrinter))
	FabricFuncsForCustomTypes["supportedinterface.Emiter"] = append(FabricFuncsForCustomTypes["supportedinterface.Emiter"], reflect.ValueOf(fabric_func_1))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_MyPrinter))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_string))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_StructWithComplexField))
	FabricFuncsForCustomTypes["supportedinterface.MyPrinter"] = append(FabricFuncsForCustomTypes["supportedinterface.MyPrinter"], reflect.ValueOf(supportedinterface.NewMyPrinter))
	m.Run()
}
