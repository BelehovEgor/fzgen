package main

// Edit if desired. Code generated by "fzgen sort".

import (
	"reflect"
	sort "sort"
	"testing"

	"github.com/BelehovEgor/fzgen/fuzzer"
)

func Fuzz_N1_Float64Slice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Len()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N2_Float64Slice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Less(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N3_Float64Slice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.Float64Slice
		var x float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		p.Search(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N4_Float64Slice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Sort()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N5_Float64Slice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Swap(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N6_IntSlice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Len()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N7_IntSlice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Less(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N8_IntSlice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.IntSlice
		var x int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		p.Search(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N9_IntSlice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Sort()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N10_IntSlice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Swap(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N11_StringSlice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Len()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N12_StringSlice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Less(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N13_StringSlice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.StringSlice
		var x string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		p.Search(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N14_StringSlice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Sort()

		// Put here your postcondition of func results...
	})
}

func Fuzz_N15_StringSlice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		x.Swap(i, j)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N17_Float64s(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.Float64s(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N18_Float64sAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.Float64sAreSorted(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N19_Ints(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.Ints(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N20_IntsAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.IntsAreSorted(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N24_SearchFloat64s(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []float64
		var x float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.SearchFloat64s(a, x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N25_SearchInts(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []int
		var x int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.SearchInts(a, x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N26_SearchStrings(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []string
		var x string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.SearchStrings(a, x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N32_Strings(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.Strings(x)

		// Put here your postcondition of func results...
	})
}

func Fuzz_N33_StringsAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		// Put here your precondition of func arguments...

		sort.StringsAreSorted(x)

		// Put here your postcondition of func results...
	})
}

func fabric_interface_empty_string(impl string) interface{} {
	return impl
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_string))
	m.Run()
}
